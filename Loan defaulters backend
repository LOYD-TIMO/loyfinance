loyfinance/
â”œâ”€â”€ Dockerfile      âœ… (no file extension!)
â”œâ”€â”€ server.js
â”œâ”€â”€ package.json
â”œâ”€â”€ package-lock.json
â”œâ”€â”€ people.db
â”œâ”€â”€ seed.js
â””â”€â”€ .gitignore
person-search/
â”œâ”€â”€ server.js
â”œâ”€â”€ package.json
â”œâ”€â”€ .gitignore
â”œâ”€â”€ people.db              # optional, will be created automatically
â”œâ”€â”€ seed.js                # optional test data
â””â”€â”€ Dockerfile             # ðŸ”¥ add this file
# Use Node.js 18 LTS image
FROM node:18

# Set working directory inside container
WORKDIR /app

# Copy package files first and install dependencies
COPY package*.json ./
RUN npm install --production

# Copy the rest of the app
COPY . .

# Expose the port Render will use
EXPOSE 10000

# Start the server
CMD ["npm", "start"]
{
  "name": "person-search",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "sqlite3": "^5.1.2",
    "cors": "^2.8.5"
  }
}
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const path = require('path');

const app = express();
app.use(cors());
app.use(express.json());

// Database file
const dbFile = path.join(__dirname, 'people.db');
const db = new sqlite3.Database(dbFile);

// Create table if not exists
db.run(`CREATE TABLE IF NOT EXISTS people(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  bio TEXT,
  email TEXT,
  photo_url TEXT
)`);

// Search endpoint
app.get('/api/search', (req, res) => {
  const q = (req.query.q || '').toLowerCase();
  if (!q) return res.json({ results: [] });

  const sql = `SELECT id, name, bio, email, photo_url AS photo
               FROM people
               WHERE LOWER(name) LIKE ? LIMIT 50`;
  db.all(sql, [`%${q}%`], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ results: rows });
  });
});

// Optional: add new people
app.post('/api/add', (req, res) => {
  const { name, bio, email, photo_url } = req.body;
  db.run(
    'INSERT INTO people(name,bio,email,photo_url) VALUES(?,?,?,?)',
    [name, bio, email, photo_url],
    function (err) {
      if (err) return res.status(500).json({ error: err.message });
      res.json({ id: this.lastID });
    }
  );
});

// Use Renderâ€™s PORT environment variable (default to 3000 locally)
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`âœ… Server running on port ${PORT}`));
node_modules/
people.db
git add .
git commit -m "Add Dockerfile for Render"
git push

git add Dockerfile
git commit -m "Add Dockerfile for Render"
git push origin main
